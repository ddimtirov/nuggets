/*
 *    Copyright 2016 by Dimitar Dimitrov
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id 'com.gradle.build-scan' version '1.6'
    id "com.jfrog.artifactory" version "4.4.14"
    id "com.jfrog.bintray" version "1.7.3"
    id "net.ltgt.errorprone" version "0.0.9" apply false // coverity doesn't like it
    id "org.standardout.versioneye" version "1.4.0"
    id "org.jetbrains.kotlin.jvm" version "1.1.1"
//    id "org.jetbrains.dokka" version "0.9.13" // TODO: update when works
    id 'com.github.ben-manes.versions' version '0.14.0' // gradlew dependencyUpdates
    id "java-library"
    id "groovy"
    id "pmd"
    id "findbugs"
    id "jacoco"
    id "maven-publish"
}
if (!System.getenv('COVERITY_SCAN_BRANCH')) {
    apply plugin:"net.ltgt.errorprone"
}

group 'io.github.ddimtirov'
description 'Loosely coupled utilities for Java 8'

ext.bintrayUsername = project.findProperty('bintrayUsername')?:System.getenv('BINTRAY_USER')?:''
ext.bintrayKey = project.findProperty('bintrayKey')?:System.getenv('BINTRAY_KEY')?:''

apply from: file('gradle/publishing.gradle')
apply from: file('gradle/artifactory.gradle')
apply from: file('gradle/bintray.gradle')
apply from: file('gradle/versions.gradle')
apply from: file('gradle/javadoc.gradle')
apply from: file('gradle/quality.gradle')

dependencies {
    compileOnly 'org.jetbrains:annotations:',
                'org.jetbrains.kotlin:kotlin-stdlib:',
                'org.codehaus.groovy:groovy:'

    testCompileOnly 'org.jetbrains:annotations:' // so that the Groovy compiler won't complain

    testImplementation 'org.spockframework:spock-core:',
                       'org.jetbrains.kotlin:kotlin-stdlib:',
                       'org.jetbrains.kotlin:kotlin-test-junit:',
                       'javax.inject:javax.inject:'

    testRuntimeOnly 'cglib:cglib-nodep:' // so we can use Spock Spy'es
}

test {
    // for predictable stack traces we disable the reflection bytecode generation
    systemProperties 'sun.reflect.inflationThreshold': Integer.MAX_VALUE
}